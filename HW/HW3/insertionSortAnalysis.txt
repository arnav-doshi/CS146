public static int[] insertionSort(int[] A, int n) {
	for (int i = 1; i < N; ++i) {
		int key = A[i];
		int j = i - 1;
	while (j >= 0 && A[j] > key) {
			A[j + 1] = A[j];
			j = j - 1;
		}
		A[j + 1] = key;
	}
	return A;
}



N = 1 + 2 + 3 + ... + k-2 + k-1 + k
2N = (1+k) + (2+k-1) + (3+k-2) + ... + (k-2+3) + (k-1+2) + (k+1)

2N = (1+k) * k

N = (1+k)/2 * k

Let n-1 = k

N = (n-1 + 1)/2 (n-1)

Therefore

N = n(n-1) / 2

Worst case:
O(n^2) 

Best case:
Omega(n)

Average case: 
Theta(n^2)